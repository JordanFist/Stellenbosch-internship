#include <stdio.h>
#include <stdlib.h>
#include <set_graph.h>

struct graph* init_graph() {
  struct graph *g = (struct graph *) malloc(sizeof(struct graph));
  if (g == NULL)
    exit(1);
  g->count_nodes = 0;
  return g;
}

//fonction qui verifie que la carte est jouable quelque part su le graphe
boolean is_playable(struct graph* g, enum card_id card) {
  struct position pos = {0,0};//les coordonnées n'ont pas d'importance à ce stade 
  struct tile *tile = init_tile(card, NORTH, pos);
  for (int i = 0 ; i < g->count_nodes ; i++) {
    for (int j = 0; j < NEIGHBOUR_CARDS; j++) {
      if((is_empty_tile(compute_neighbour(g->nodes[i], j)) == TRUE) && (is_connectable(g->nodes[i], tile, j) == TRUE)) {
	free_tile(tile);
	return TRUE;
      }
    }
  }
  free_tile(tile);
  return FALSE;
}

//fontion qui verifie que le coup joué est valide ou pas 
boolean valid_move_card(struct move *m) {
  int cpt = 0;
  struct tile *tile = init_tile(m->card, m->dir, m->onto);
  for (int i = 0; i < NEIGHBOUR_CARDS; ++i) {
    if (match_card(tile, compute_neighbour(tile, i), i) == TRUE)
      ++cpt;
  }
  if (cpt == SIDES) {
    m->check = VALID;
    free_tile(tile);
    return TRUE;
  }
  m->check = FAILED;
  free_tile(tile);
  return FALSE;
}

struct tile *find_tile(struct graph *g, struct position *p) {
  for (int i = 0; i < g->count_nodes; ++i) {
    if (g->nodes[i]->pos.x == p->x && g->nodes[i]->pos.y == p->y)
      return g->nodes[i];
  }
  return NULL;
}

int add_tile(struct graph *g, struct move const *m) {
  struct tile *tile_add = init_tile(m->card, m->dir, m->onto);
  if(tile_add == NULL) {
    free_tile(tile_add);
    return EXIT_FAILURE;
  }
  int offsetx[] = {0, -1, 0, 1};
  int offsety[] = {1, 0, -1, 0};
  struct position p;
  struct tile *t;
  if (m->check == VALID) {
    g->nodes[g->count_nodes] = tile_add;
    for (int i = 0 ; i < NEIGHBOUR_CARDS; i++) {
      p.x = m->onto.x + offsetx[i];
      p.y = m->onto.y + offsety[i];
      tile_add->neighbour[i] = find_tile(g, &p); 
      t = compute_neighbour(tile_add, i);
      if(t != NULL)
	t->neighbour[opposite_face(i)] = tile_add;
    }
    ++g->count_nodes;
    return EXIT_SUCCESS; 
  } 
  free(tile_add);
  return EXIT_FAILURE;
}

void free_graph(struct graph *g) {
  for (int i = 0; i < g->count_nodes; ++i)
    free(g->nodes[i]);
  free(g);
}




