#include <stdio.h>
#include <stdlib.h>
#include <graph.h>

/*
void print(struct tile* tile){
  for (int i=0 ;i<NUMBER_OF_DIRECTIONS; i++)
    printf("%d\t",tile->table[i].land_type);
  printf("\n");
}
*/

struct tile* init_tile(enum card_id id ,enum direction dir, struct position position) {
  struct tile *tile = (struct tile *) malloc(sizeof(struct tile));
  if (tile == NULL)
    exit(1);
  tile->orientation = dir;
  tile->pos = position;
  for (int i = 0; i < NUMBER_OF_DIRECTIONS; i++) {
    tile->nodes[i].land_type = cards_content[id][i];
    tile->nodes[i].meeple = FALSE;
    tile->nodes[i].meeple_owner = NO_PLAYER;
  }
  //init_next_nodes(tile);
  rotation(tile, dir);
  return tile;  
}

enum landscape landscape_node(struct node *n) {
  return n->land_type;
}

int size_next_nodes(struct node *n) {
  return n->number_of_nodes;
}

//initialiser le tableau de next_nodes Ã  NULL (enfin les restantes)
void init_next_nodes(struct tile *t) {
  int check = 0;
  for (int i = 0; i < NUMBER_OF_DIRECTIONS - 2; ++i) {
    if (landscape_node(&t->nodes[i]) == landscape_node(&t->nodes[i + 1])) {
      t->nodes[i].next_nodes[size_next_nodes(&t->nodes[i])] = &t->nodes[i + 1];
      t->nodes[i + 1].next_nodes[size_next_nodes(&t->nodes[i + 1])] = &t->nodes[i];
      ++t->nodes[i].number_of_nodes;
      ++t->nodes[i + 1].number_of_nodes;
    }
    if (landscape_node(&t->nodes[i]) == landscape_node(&t->nodes[NUMBER_OF_DIRECTIONS - 1])) {
      if (landscape_node(&t->nodes[i]) == ROAD && landscape_node(&t->nodes[NUMBER_OF_DIRECTIONS - 1]) == ROAD) {
	  t->nodes[i].next_nodes[size_next_nodes(&t->nodes[NUMBER_OF_DIRECTIONS - 1])] = &t->nodes[i + 1];
	  t->nodes[NUMBER_OF_DIRECTIONS - 1].next_nodes[size_next_nodes(&t->nodes[NUMBER_OF_DIRECTIONS - 1])] = &t->nodes[i];
	  ++t->nodes[i].number_of_nodes;
	  ++t->nodes[NUMBER_OF_DIRECTIONS - 1].number_of_nodes;
	} else if (check == 0) {
	t->nodes[i].next_nodes[size_next_nodes(&t->nodes[NUMBER_OF_DIRECTIONS - 1])] = &t->nodes[i + 1];
	t->nodes[NUMBER_OF_DIRECTIONS - 1].next_nodes[size_next_nodes(&t->nodes[NUMBER_OF_DIRECTIONS - 1])] = &t->nodes[i];
	++t->nodes[i].number_of_nodes;
	++t->nodes[NUMBER_OF_DIRECTIONS - 1].number_of_nodes;
	check = 1;
      }
    }
  }
}

void free_tile(struct tile* tile){
  free(tile);
  }

boolean is_empty_tile(struct tile *t) {
  if (t == NULL)
    return TRUE;
  return FALSE;
}

void rotation(struct tile* t, enum direction dir) {
  struct node swap;
  for (unsigned int j = 0; j < 3 * dir; ++j) {
    swap = t->nodes[NUMBER_OF_DIRECTIONS - 2];
    for (int i = NUMBER_OF_DIRECTIONS - 2; i > 0; --i)
      t->nodes[i] = t->nodes[i - 1];
    t->nodes[0] = swap;
  }
}

enum landscape get_face(struct tile *t, enum direction d) {
  return t->nodes[3 * d + 1].land_type;
}

enum direction opposite_face(enum direction d) {
  return ((d + 2) % SIDES);
}

enum place oppossite_node(enum place p) {
  if (p == POS_CENTER)
    exit(1);
  if (p == POS_WEST_SOUTH)
    return POS_EAST_SOUTH;
  else
    return ((p + 6) % (NUMBER_OF_DIRECTIONS - 1));
  
}

//d direction de la carte 2 par rapport a la carte 1
boolean match_side(struct tile *t1, struct tile *t2, enum direction d) {
  if (t2 == NULL)
    return TRUE;
  enum landscape face1 = get_face(t1, d);
  enum landscape face2 = get_face(t2, opposite_face(d));
  return (face1 == face2);
}


