#include <stdio.h>
#include <stdlib.h>
#include <nodes.h>
#include <assert.h>
#include <set_dynamic.h>

/*POUR L'AFFICHAGE*/
char FAIL[]="\033[31;1mFAIL\033[0m";
char PASSED[]="\033[32;1mPASSED\033[0m";

void test_init_node() {
  printf("Test de init_node .............");
  
  struct node n;
  init_node(&n, 0, 0);

  assert(n.land_type == PLAIN);
  assert(n.meeple == FALSE);
  assert(n.meeple_owner == NO_PLAYER);
  assert(n.number_of_nodes == 0);
  for (int i = 0; i < CONNEXIONS_PER_SIDE; ++i)
    assert(n.next_nodes[i] == NULL);
  
  printf("%s\n",PASSED);
}

void test_landscape_node() {
  printf("Test de landscape_node  .............");
  
  struct node n;
  init_node(&n, 1, 0);
  assert(landscape_node(&n) == PLAIN);

  init_node(&n, 23, 1);
  assert(landscape_node(&n) == ROAD);

  printf("%s\n",PASSED);
}

void test_size_next_node() {
  printf("Test de size_next_node .............");
  
  struct node n1;
  struct node n2;
  init_node(&n1, 0, 0);
  init_node(&n2, 0, 1);

  assert(size_next_nodes(&n1) == 0);
  assert(size_next_nodes(&n2) == 0);
  
  node_connection(&n1, &n2);

  assert(size_next_nodes(&n1) == 1);
  assert(size_next_nodes(&n2) == 1);
  
  printf("%s\n",PASSED);
}

void test_oppossite_node() {
  printf("Test de oppossite_node .............");
  
  int res = oppossite_node(1);
  assert(res == 7);

  res = oppossite_node(8);
  assert(res == 2);
  
  printf("%s\n",PASSED);
}

void test_node_connection() {
  printf("Test de node_connection .............");

  struct node n1;
  struct node n2;
  init_node(&n1, 0, 0);
  init_node(&n2, 0, 1);
  node_connection(&n1, &n2);

  assert(n1.next_nodes[0] == &n2);
  assert(n2.next_nodes[0] == &n1);
  assert(n1.next_nodes[1] == NULL);
  assert(n2.next_nodes[1] == NULL);
  
  printf("%s\n",PASSED);
}

void test_node_disconnection() {
  printf("Test de node_disconnection .............");

  struct node n1;
  struct node n2;
  struct node n3;
  
  init_node(&n1, 0, 0);
  init_node(&n2, 0, 1);
  init_node(&n3, 0, 2);
  
  node_connection(&n1, &n2);
  node_connection(&n2, &n3);
  node_disconnection(&n1, &n2);

  for (int i = 0; i < CONNEXIONS_PER_SIDE; ++i)
    assert(n1.next_nodes[i] == NULL);

  assert(n2.next_nodes[0] == &n3);
  assert(n3.next_nodes[0] == &n2);
  assert(n2.next_nodes[1] == NULL);
  assert(n3.next_nodes[1] == NULL);
  assert(n1.number_of_nodes == 0);
  assert(n2.number_of_nodes == 1);
  assert(n3.number_of_nodes == 1);

  printf("%s\n",PASSED);
}

void test_shift_left() {
  printf("Test de shift_left .............");

  struct node n1;
  struct node n2;
  struct node n3;
  init_node(&n1, 0, 0);
  init_node(&n2, 0, 0);
  init_node(&n3, 0, 0);
  node_connection(&n1, &n2);
  node_connection(&n2, &n3);
  
  shift_left(&n1, 0);
  shift_left(&n2, 1);

  assert(n1.next_nodes[0] == NULL);
  assert(n1.next_nodes[0] == NULL);
  assert(n2.next_nodes[1] == NULL);
  assert(n2.next_nodes[0] != NULL);
  assert(n3.next_nodes[0] != NULL);
  
  printf("%s\n",PASSED);
}

void test_is_meeple_in_area() {
  printf("Test de is_meeple_in_area .............");

  struct node n1;
  struct node n2;
  struct node n3;
  struct node n4;
  struct node n5;
  struct node n6;

  init_node(&n1, 1, 1);
  init_node(&n2, 1, 2);
  init_node(&n3, 1, 3);
  init_node(&n4, 1, 4);
  init_node(&n5, 1, 5);
  init_node(&n6, 1, 6);

  node_connection(&n1, &n2);
  node_connection(&n2, &n3);
  node_connection(&n3, &n4);
  node_connection(&n4, &n5);
  node_connection(&n3, &n6);

  n5.meeple = TRUE;

  int res = is_meeple_in_area(&n6);
  assert(res == TRUE);
  
  printf("%s\n",PASSED);
}

int main() {
  test_init_node();
  test_landscape_node();
  test_size_next_node();
  test_oppossite_node();
  test_node_connection();
  test_node_disconnection();
  test_shift_left();
  test_is_meeple_in_area();
  
  return EXIT_SUCCESS;
}
