#include <stdio.h>
#include <stdlib.h>
#include <set_graph.h>

struct graph* init_graph() {
  struct graph *g = (struct graph *) malloc(sizeof(struct graph));
  if (g == NULL)
    exit(1);
  g->number_of_tiles = 0;
  return g;
}

struct tile *find_tile(struct graph *g, struct position *p) {
  for (int i = 0; i < g->number_of_tiles; ++i) {
    if (g->tiles[i]->pos.x == p->x && g->tiles[i]->pos.y == p->y)
      return g->tiles[i];
  }
  return NULL;
}

struct position neighbour_position(struct position *p, enum direction d) {
  struct position pos = {p->x, p->y};
  if (d == NORTH) 
    ++pos.y;
  if (d == WEST) 
    --pos.x;
  if (d == SOUTH) 
    --pos.y;
  if (d == EAST) 
    ++pos.x;
  return pos;
}

struct tile *compute_neighbour(struct graph *g, struct tile *t, enum direction d) {
  struct position pos = neighbour_position(&t->pos, d);
  return find_tile(g, &pos);
}    

boolean match_card(struct graph *g, struct tile *t) {
  int cpt = 0;
  for (int i = 0; i < SIDES; ++i) {
    if (match_side(t, compute_neighbour(g, t, i), i) == TRUE) {
      ++cpt;
    }
  }
  if (cpt == SIDES)
    return TRUE;
  return FALSE;
}

boolean is_connectable(struct graph *g, struct tile *t) {
  for (int i = 0; i < SIDES; ++i) {
    if (match_card(g, t) == TRUE) {
      t->orientation = i;
      return TRUE;
    }
    rotation(t, WEST);
  }
  return FALSE;
}

//fonction qui verifie que la carte est jouable quelque part sur le graphe
boolean is_playable(struct graph* g, enum card_id card) {
  struct position pos = {0, 0};
  struct tile *tile = init_tile(card, NORTH, pos);
  for (int i = 0 ; i < g->number_of_tiles ; i++) {
    for (int j = 0; j < NEIGHBOUR_CARDS; j++) {
      tile->pos = neighbour_position(&g->tiles[i]->pos, j);
      if((is_empty_tile(compute_neighbour(g, g->tiles[i], j)) == TRUE) && (is_connectable(g, tile) == TRUE)) {
	free_tile(tile);
	return TRUE;
      }
    }
  }
  free_tile(tile);
  return FALSE;
}

//fontion qui verifie que le coup jouÃ© est valide ou pas 
boolean valid_move_card(struct graph *g, struct move *m) {
  struct tile *t = init_tile(m->card, m->dir, m->onto);
  if (match_card (g, t) == TRUE) {
    m->check = VALID;
    free_tile(t);
    return TRUE;
  }
  m->check = FAILED;
  free_tile(t);
  return FALSE;
}

//TODO
boolean valid_move_meeple(struct graph *g, struct move *m) {
  add_tile(g, m);
  int i = 0;
  int answer;
  while (allowed_positions[m->card][i] != NO_MEEPLE) {
    if (m->place == allowed_positions[m->card][i]) {
      answer = is_meeple_in_area(&g->tiles[g->number_of_tiles - 1]->nodes[m->place]);
      remove_tile(g, m);
      return !answer;
    }
    ++i;
  }
  remove_tile(g, m);
  return FALSE;
}


boolean valid_move(struct graph *g, struct move *m) {
  if (valid_move_card(g, m) == TRUE && valid_move_meeple(g, m) == TRUE)
    return TRUE;
  return FALSE;
}

boolean is_meeple_in_area(struct node *n) {
  if (n->meeple == TRUE)
    return TRUE;
  for (int i = 0; i < CONNEXIONS_PER_SIDE; ++i) {
    if (n->next_nodes[i] != NULL)
      is_meeple_in_area(n->next_nodes[i]);
  }
  return FALSE;
}

int add_tile(struct graph *g, struct move const *m) {
  struct tile *tile_add = init_tile(m->card, m->dir, m->onto);
  if (m->check == VALID) {
    g->tiles[g->number_of_tiles] = tile_add;
    ++g->number_of_tiles;
    //add_card_connection(g, tile_add);
    return EXIT_SUCCESS; 
  } 
  free(tile_add);
  return EXIT_FAILURE;
}

//attention si on supprime une node pas a la fin du tableau
boolean remove_tile(struct graph *g, struct move *m) {
  struct tile *t_remove = find_tile(g, &m->onto);
  if (t_remove != NULL) {
    remove_card_connection(g, t_remove);
    free_tile(t_remove);
    --g->number_of_tiles;
    return TRUE;
  }
  return FALSE;
}

void node_connection(struct node *n1, struct node *n2) {
  if (size_next_nodes(n1) < CONNEXIONS_PER_SIDE && size_next_nodes(n2) < CONNEXIONS_PER_SIDE) {
    n1->next_nodes[size_next_nodes(n1)] = n2;
    n2->next_nodes[size_next_nodes(n2)] = n1;
    ++n1->number_of_nodes;
    ++n2->number_of_nodes;
  }
  printf("\nERROR : next_nodes est rempli\n");
  exit(1);
}

void shift_left(struct node *n, int i) {
  for (int j = i; j < CONNEXIONS_PER_SIDE - 1; ++j) {
    n->next_nodes[j] = n->next_nodes[j + 1];
  }
  n->next_nodes[CONNEXIONS_PER_SIDE - 1] = NULL;
}

void node_disconnection(struct node *n1, struct node *n2) {
  for (int i = 0; i < CONNEXIONS_PER_SIDE; ++i) {
    if (n1->next_nodes[i] == n2)
      shift_left(n1, i);
    if (n2->next_nodes[i] == n1)
      shift_left(n2, i);
  }
}

void remove_card_connection(struct graph *g, struct tile *t) {
  struct tile *t_neighbour;
  for (int i = 0; i < NEIGHBOUR_CARDS; ++i) {
    t_neighbour = compute_neighbour(g, t, i);
    for (int j = CONNEXIONS_PER_SIDE * i + 1; j < CONNEXIONS_PER_SIDE * (i + 1) + 1; ++j) {
      if (t_neighbour != NULL)
	node_disconnection(&t->nodes[j], &t_neighbour->nodes[oppossite_node(j)]);
    }
  }
}

void add_card_connection(struct graph *g, struct tile *t) {
  struct tile *t_neighbour;
  for (int i = 0; i < NEIGHBOUR_CARDS; ++i) {
    t_neighbour = compute_neighbour(g, t, i);
    for (int j = CONNEXIONS_PER_SIDE * i + 1; j < CONNEXIONS_PER_SIDE * (i + 1) + 1; ++j) {
      if (t_neighbour != NULL)
	node_connection(&t->nodes[j], &t_neighbour->nodes[oppossite_node(j)]);
    }
  }
}

void free_graph(struct graph *g) {
  for (int i = 0; i < g->number_of_tiles; ++i)
    free(g->tiles[i]);
  free(g);
}



